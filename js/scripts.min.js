const calcs = document.querySelectorAll(".calc");
const innerRanges = document.querySelectorAll(".calc__inner-range");
const sliderElements = document.querySelectorAll(".calc__range");
const inputs = document.querySelectorAll(".calc__input");
const variants = document.querySelectorAll(".calc__radio");
const amounts = document.querySelectorAll(".calc__sum-descr");
const numbers = document.querySelectorAll(".calc__number");
const priceOptions = [
	{ name: "Ламинат", price: 250 },
	{ name: "Паркет", price: 350 },
	{ name: "Линолеум", price: 150 },
	{ name: "Наливной пол", price: 300 },
];
let variant = "Ламинат";
let tempSliderValue = 32;
let progress = 0;
let sliderElValue = 32;
let input = 32;
let timerId = null;
let interval = null;

variants[0].checked = "true";

function priceCalculation(e) {
	const isRange = e.target.className === "calc__range";
	const isInput = e.target.className === "calc__input";
	const isPlus = e.target.className === "calc__button btn-reset";
	const isMinus =
		e.target.className === "calc__button calc__button--minus btn-reset";

	if (isRange) {
		sliderElValue = e.target.value;
		tempSliderValue = e.target.value;
		input = tempSliderValue;
	} else if (isInput && e.target.value <= 400 && e.target.value >= 0) {
		if (e.target.value === "0" || e.target.value === "") {
			tempSliderValue = 0;
		} else if (e.target.value.length !== 4) {
			tempSliderValue = e.target.value;
		} else {
			tempSliderValue = e.target.value.replace(0, "");
		}
		sliderElValue = tempSliderValue;
		input = tempSliderValue;
	} else if (
		(isInput && isNaN(Number(e.target.value))) ||
		e.target.value > 400 ||
		e.target.value < 0
	) {
		input = tempSliderValue;
		tempSliderValue = tempSliderValue;
		sliderElValue = tempSliderValue;
	} else if (isPlus && tempSliderValue >= 0 && tempSliderValue < 400) {
		tempSliderValue = ++tempSliderValue;
		input = tempSliderValue;
		sliderElValue = tempSliderValue;
	} else if (isMinus && tempSliderValue > 0 && tempSliderValue <= 400) {
		tempSliderValue = --tempSliderValue;
		input = tempSliderValue;
		sliderElValue = tempSliderValue;
	}

	distributionResults();
}

function distributionResults() {
	sliderElements.forEach((sliderEl) => {
		sliderEl.value = sliderElValue;
		progress = (tempSliderValue / sliderEl.max) * 100;
		sliderEl.style.background = `linear-gradient(to right, #5A483F ${progress}%, rgba(0, 0, 0, 0.15) ${progress}%)`;
	});

	inputs.forEach((item) => {
		item.value = input;
	});

	amounts.forEach((sum) => {
		const floorType = priceOptions.find((item) => item.name === variant);
		const money = `${tempSliderValue * floorType.price}`.split("");
		let id = money.length % 3 === 2 ? 1 : money.length % 3 === 1 ? 2 : 0;
		const filteredBudget = money.map((item) => {
			id++;
			if (id % 3 !== 0) {
				return item;
			} else {
				return `${item} `;
			}
		});
		const filteredBudgetLength = filteredBudget.join("").length;
		sum.textContent =
			id % 3 === 0
				? filteredBudget.join("").substring(0, filteredBudgetLength - 1)
				: filteredBudget.join("");
	});
}

function changeValueInput(e) {
	const isPlus = e.target.className === "calc__button btn-reset";
	const isMinus =
		e.target.className === "calc__button calc__button--minus btn-reset";

	if (isPlus && tempSliderValue >= 0 && tempSliderValue < 400) {
		timerId = setTimeout(() => {
			interval = setInterval(() => {
				tempSliderValue =
					tempSliderValue < 400 ? ++tempSliderValue : tempSliderValue;
				input = tempSliderValue;
				sliderElValue = tempSliderValue;
				distributionResults();
			}, 50);
		}, 300);
	} else if (isMinus && tempSliderValue > 0 && tempSliderValue <= 400) {
		timerId = setTimeout(() => {
			interval = setInterval(() => {
				tempSliderValue =
					tempSliderValue > 0 ? --tempSliderValue : tempSliderValue;
				input = tempSliderValue;
				sliderElValue = tempSliderValue;
				distributionResults();
			}, 50);
		}, 200);
	}

	distributionResults();
}

function clearTimers() {
	clearTimeout(timerId);
	clearInterval(interval);
}

function maskPhone(selector, masked = "+7 (___) ___-__-__") {
	const elems = document.querySelectorAll(selector);

	function mask(event) {
		const keyCode = event.keyCode;
		const template = masked,
			def = template.replace(/\D/g, ""),
			val = this.value.replace(/\D/g, "");
		let i = 0,
			newValue = template.replace(/[_\d]/g, function (a) {
				return i < val.length ? val.charAt(i++) || def.charAt(i) : a;
			});
		i = newValue.indexOf("_");
		if (i !== -1) {
			newValue = newValue.slice(0, i);
		}
		let reg = template
			.substr(0, this.value.length)
			.replace(/_+/g, function (a) {
				return "\\d{1," + a.length + "}";
			})
			.replace(/[+()]/g, "\\$&");
		reg = new RegExp("^" + reg + "$");
		if (
			!reg.test(this.value) ||
			this.value.length < 5 ||
			(keyCode > 47 && keyCode < 58)
		) {
			this.value = newValue;
		}
		if (event.type === "blur" && this.value.length < 5) {
			this.value = "";
		}
	}

	for (const elem of elems) {
		elem.addEventListener("input", mask);
		elem.addEventListener("focus", mask);
		elem.addEventListener("blur", mask);
	}
}

variants.forEach((item) => {
	item.addEventListener("click", (e) => {
		variants.forEach((variant) => {
			if (variant.value === e.target.value) {
				variant.checked = "true";
			}
		});

		variant = item.value;
		priceCalculation(e);
	});
});

innerRanges.forEach((innerRange) => {
	innerRange.addEventListener("input", (e) => {
		const isRange = e.target.className === "calc__range";
		const isInput = e.target.className === "calc__input";

		if (isRange || isInput) {
			priceCalculation(e);
		}
	});

	innerRange.addEventListener("mousedown", (e) => {
		const isPlus = e.target.className === "calc__button btn-reset";
		const isMinus =
			e.target.className === "calc__button calc__button--minus btn-reset";

		if (isPlus || isMinus) {
			changeValueInput(e, "mousedown");
		}
	});

	innerRange.addEventListener("mouseup", (e) => {
		const isPlus = e.target.className === "calc__button btn-reset";
		const isMinus =
			e.target.className === "calc__button calc__button--minus btn-reset";

		if (isPlus || isMinus) {
			clearTimers();
		}
	});

	innerRange.addEventListener("mouseout", (e) => {
		const isPlus = e.target.className === "calc__button btn-reset";
		const isMinus =
			e.target.className === "calc__button calc__button--minus btn-reset";

		if (isPlus || isMinus) {
			clearTimers();
		}
	});

	innerRange.addEventListener("click", (e) => {
		const isPlus = e.target.className === "calc__button btn-reset";
		const isMinus =
			e.target.className === "calc__button calc__button--minus btn-reset";

		if (isPlus || isMinus) {
			priceCalculation(e);
		}
	});
});

calcs.forEach((calc) => {
	calc.addEventListener("submit", (e) => {
		e.preventDefault();
	});
});

distributionResults();

maskPhone(".calc__number", "+7 (___) ___-__-__");

const quizData = [
	{
		number: 1,
		title: "На какую сумму вы рассчитываете?",
		answer_alias: "money",
		answers: [
			{
				answer_title: "500 рублей",
				type: "checkbox",
			},
			{
				answer_title: "5000 рублей",
				type: "checkbox",
			},
			{
				answer_title: "Введу текстом",
				type: "text",
			},
		],
	},
	{
		number: 2,
		title: "Какой именно вам нужен сайт?",
		answer_alias: "great",
		answers: [
			{
				answer_title: "Лендинг-пейдж",
				type: "radio",
			},
			{
				answer_title: "Корпоративный сайт",
				type: "radio",
			},
			{
				answer_title: "Интернет-магазин",
				type: "radio",
			},
		],
	},
	{
		number: 3,
		title: "Оставьте свой телефон, мы вам перезвоним",
		answer_alias: "phone",
		answers: [
			{
				answer_title: "Введите телефон",
				type: "text",
			},
		],
	},
];

const quizTemplate = (data = [], dataLength, options) => {
	const { number, title } = data;
	const { nextBtnText } = options;
	const answers = data.answers.map((item) => {
		return `
			<label class="quiz-question__label">
				<input class="quiz-question__answer" type="${item.type}" name="${
			data.answer_alias
		}" data-valid="false" ${
			item.type === "text" ? `placeholder="Введите ваш вариант..."` : ""
		} value="${item.type !== "text" ? item.answer_title : ""}"/>
				<span>${item.answer_title}</span>
			</label>
		`;
	});

	return `
		<div class="quiz__content">
			<div class="quiz__questions">${number} из ${dataLength}</div>
			<div class="quiz-question">
				<h3 class="quiz-question__title">${title}</h3>
				<div class="quiz-question__answers">
					${answers.join("")}
				</div>
				<button class="quiz-question__btn" type="button" data-next-btn>${nextBtnText}</button>
			</div>
		</div>
	`;
};

class Quiz {
	constructor(selector, data, options) {
		this.$el = document.querySelector(selector);
		this.options = options;
		this.data = data;
		this.counter = 0;
		this.dataLength = this.data.length;
		this.resultArray = [];
		this.temp = {};
		this.init();
		this.events();
	}

	init() {
		this.$el.innerHTML = quizTemplate(
			quizData[this.counter],
			this.dataLength,
			this.options
		);
	}

	events() {
		this.$el.addEventListener("click", (e) => {
			if (e.target === document.querySelector("[data-next-btn]")) {
				this.addToSend();
				this.nextQuestion();
			}

			if (e.target === document.querySelector("[data-send]")) {
				this.addToSend();
				this.send();
			}
		});

		this.$el.addEventListener("change", (e) => {
			if (e.target.tagName === "INPUT") {
				if (e.target.type !== "checkbox" && e.target.type !== "radio") {
					let elements = this.$el.querySelectorAll("input");

					elements.forEach((element) => {
						element.checked = false;
					});
				}

				this.temp = this.serialize(this.$el);
			}
		});
	}

	nextQuestion() {
		if (this.valid()) {
			if (this.counter + 1 < this.dataLength) {
				this.counter++;

				this.$el.innerHTML = quizTemplate(
					quizData[this.counter],
					this.dataLength,
					this.options
				);

				if (this.counter + 1 === this.dataLength) {
					this.$el.insertAdjacentHTML(
						"beforeend",
						`<button class="quiz-question__btn" type="button" data-send>${this.options.sendBtnText}</button>`
					);
					this.$el.querySelector("[data-next-btn]").remove();
				}
			}
		}
	}

	valid() {
		let isValid = false;
		let elements = this.$el.querySelectorAll("input");

		elements.forEach((element) => {
			switch (element.type) {
				case "text":
					element.value ? (isValid = true) : element.classList.add("error");
				case "checkbox":
					element.checked ? (isValid = true) : element.classList.add("error");
				case "radio":
					element.checked ? (isValid = true) : element.classList.add("error");
			}
		});

		return isValid;
	}

	addToSend() {
		this.resultArray.push(this.temp);
	}

	send() {
		if (this.valid()) {
			let elements = this.$el.querySelectorAll("input");

			elements.forEach((element) => {
				element.classList.remove("error");
			});

			const formData = new FormData();

			for (let item of this.resultArray) {
				for (let obj in item) {
					formData.append(obj, item[obj].substring(0, item[obj].length - 1));
				}
			}

			// const response = fetch("mail.php", {
			// 	method: "POST",
			// 	body: formData,
			// });
		}
	}

	serialize(form) {
		let field,
			s = {};
		let valueString = "";
		if (typeof form == "object" && form.nodeName == "FORM") {
			let len = form.elements.length;
			for (let i = 0; i < len; i++) {
				field = form.elements[i];

				if (
					field.name &&
					!field.disabled &&
					field.type != "file" &&
					field.type != "reset" &&
					field.type != "submit" &&
					field.type != "button"
				) {
					if (field.type == "select-multiple") {
						for (j = form.elements[i].options.length - 1; j >= 0; j--) {
							if (field.options[j].selected)
								s[s.length] =
									encodeURIComponent(field.name) +
									"=" +
									encodeURIComponent(field.options[j].value);
						}
					} else if (
						(field.type != "checkbox" &&
							field.type != "radio" &&
							field.value) ||
						field.checked
					) {
						valueString += field.value + ",";

						s[field.name] = valueString;
					}
				}
			}
		}
		return s;
	}
}

window.quiz = new Quiz(".quiz", quizData, {
	nextBtnText: "Далее",
	sendBtnText: "Отправлять",
});
